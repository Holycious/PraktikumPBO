/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend;
import backend.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Leon Shan
 */
public class FrmPeminjaman extends javax.swing.JFrame {

    /**
     * Creates new form FrmPeminjaman
     */
    public FrmPeminjaman() {
        initComponents();
        tampilCmbPegawai();
        tampilData();
        kosongkanForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtNoUrut = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtAnggota = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtBuku = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtTanggal = new javax.swing.JFormattedTextField();
        labelTanggalPeminjaman = new javax.swing.JLabel();
        btnSimpan = new javax.swing.JButton();
        btnTambahBaru = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPeminjaman = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        txtKembali = new javax.swing.JFormattedTextField();
        labelTanggalKembali = new javax.swing.JLabel();
        cmbPegawai = new javax.swing.JComboBox<>();
        CariAnggota = new javax.swing.JButton();
        CariBuku = new javax.swing.JButton();
        labelnama = new javax.swing.JLabel();
        labelbuku = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ID Peminjaman");

        txtNoUrut.setEnabled(false);
        txtNoUrut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNoUrutActionPerformed(evt);
            }
        });

        jLabel2.setText("Nama Pegawai");

        jLabel3.setText("ID Anggota");

        jLabel4.setText("ID Buku");

        txtBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBukuActionPerformed(evt);
            }
        });

        jLabel5.setText("Tanggal Pinjam");

        txtTanggal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTanggalFocusLost(evt);
            }
        });
        txtTanggal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTanggalActionPerformed(evt);
            }
        });

        labelTanggalPeminjaman.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        labelTanggalPeminjaman.setText("YYYY-MM-DD");

        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnTambahBaru.setText("Tambah Baru");
        btnTambahBaru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahBaruActionPerformed(evt);
            }
        });

        tblPeminjaman.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPeminjaman.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPeminjamanMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblPeminjaman);

        jLabel7.setText("Tanggal Kembali");

        txtKembali.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtKembaliFocusLost(evt);
            }
        });
        txtKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKembaliActionPerformed(evt);
            }
        });

        labelTanggalKembali.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        labelTanggalKembali.setText("YYYY-MM-DD");

        cmbPegawai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        CariAnggota.setText("Cari");
        CariAnggota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CariAnggotaActionPerformed(evt);
            }
        });

        CariBuku.setText("Cari");
        CariBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CariBukuActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)
                        .addGap(0, 505, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(131, 131, 131)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtAnggota)
                                                    .addComponent(txtBuku, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                                    .addComponent(cmbPegawai, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(CariAnggota)
                                            .addComponent(CariBuku)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4))
                                        .addGap(52, 52, 52)
                                        .addComponent(txtNoUrut, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(49, 49, 49)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(labelTanggalKembali))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(txtTanggal, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(labelTanggalPeminjaman)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(labelnama, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelbuku, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(66, 66, 66))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnTambahBaru)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnSimpan)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnUpdate)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtNoUrut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmbPegawai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAnggota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBuku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CariAnggota)
                            .addComponent(labelnama, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CariBuku, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelbuku, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTanggal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(labelTanggalPeminjaman))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(txtKembali, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelTanggalKembali))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSimpan)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTambahBaru)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void kosongkanForm(){
        txtNoUrut.setText("");
        cmbPegawai.setSelectedIndex(-1);
        txtAnggota.setText("");
        txtBuku.setText("");
        txtTanggal.setText("");
        txtKembali.setText("");
    }
    public void tampilData(){
    String[] kolom = {"ID", "ID ANGGOTA", "ID BUKU", "Tanggal Pinjam", "Tanggal Kembali", "ID Pegawai"};
    ArrayList<Peminjaman> list = new Peminjaman().getAll();  // Mengambil semua data peminjaman
    Object rowData[] = new Object[6];

    tblPeminjaman.setModel(new DefaultTableModel(new Object[][] {}, kolom));

    if (list.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Tidak ada data.");
    } else {
        for (int i = 0; i < list.size(); i++) {
            rowData[0] = list.get(i).getIdPeminjaman();
            rowData[1] = list.get(i).getAnggota().getNama();
            rowData[2] = list.get(i).getBuku().getJudul();
            rowData[3] = list.get(i).getTanggalPinjam();
            rowData[4] = list.get(i).getTanggalKembali();
            rowData[5] = list.get(i).getPegawai() != null ? list.get(i).getPegawai().getIdpegawai() : "NULL";

            ((DefaultTableModel) tblPeminjaman.getModel()).addRow(rowData);
        }
    }
    }
    public void cari(String keyword) {
    String[] kolom = {"ID", "ID ANGGOTA", "ID BUKU", "Tanggal Pinjam", "Tanggal Kembali","ID Pegawai"};
    ArrayList<Peminjaman> list = new Peminjaman().search(keyword);
    Object rowData[] = new Object[6];

    tblPeminjaman.setModel(new DefaultTableModel(new Object[][] {}, kolom));

    if (list.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Tidak ada data yang sesuai dengan kata kunci: " + keyword);
    } else {
        for (int i = 0; i < list.size(); i++) {
            rowData[0] = list.get(i).getIdPeminjaman();
            rowData[1] = list.get(i).getAnggota().getNama();
            rowData[2] = list.get(i).getBuku().getJudul();
            rowData[3] = list.get(i).getTanggalPinjam();
            rowData[4] = list.get(i).getTanggalKembali();
            rowData[5] = list.get(i).getPegawai() != null ? list.get(i).getPegawai().getIdpegawai() : "NULL";
            
          
            ((DefaultTableModel) tblPeminjaman.getModel()).addRow(rowData);
        }
//        JOptionPane.showMessageDialog(this, list.size() + " data ditemukan.");
    }
}
    public void tampilCmbPegawai(){
        cmbPegawai.setModel(new DefaultComboBoxModel(new Pegawai().getAll().toArray()));
    }
    private void txtBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBukuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBukuActionPerformed

    private void CariAnggotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CariAnggotaActionPerformed
        // TODO add your handling code here:
    try {
            // Ambil teks dari TextField dan hapus spasi tambahan
            String input = txtAnggota.getText().trim();

            // Cek apakah input kosong
            if (input.isEmpty()) {
                labelnama.setText("Input tidak boleh kosong. Masukkan ID yang valid.");
                return;
            }

            // Validasi input: coba konversi input ke angka
            int keyword = Integer.parseInt(input);

            // Panggil metode getById untuk mencari anggota berdasarkan ID
            Anggota hasil = new Anggota().getById(keyword);

            // Cek apakah hasil pencarian kosong
            if (hasil != null && hasil.getNama() != null) {
                // Tampilkan hanya nama anggota
                labelnama.setText("Nama: " + hasil.getNama());
            } else {
                labelnama.setText("Anggota dengan ID tersebut tidak ditemukan.");
            }
        } catch (NumberFormatException e) {
            // Tampilkan pesan jika input bukan angka
            labelnama.setText("Input harus berupa angka. Silakan masukkan ID anggota yang valid.");
        } catch (Exception e) {
            // Tangkap exception lain jika ada kesalahan
            labelnama.setText("Terjadi kesalahan saat mencari data anggota.");
            e.printStackTrace(); // Log error untuk debugging
        }
    }//GEN-LAST:event_CariAnggotaActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
    try {
    // Cek apakah input ID Anggota dan ID Buku valid
    String idAnggotaStr = txtAnggota.getText().trim();
    String idBukuStr = txtBuku.getText().trim();

    // Validasi apakah ID Anggota atau ID Buku kosong
    if (idAnggotaStr.isEmpty() || idBukuStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "ID Anggota dan ID Buku tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
    }

    int idAnggota = Integer.parseInt(idAnggotaStr);
    int idBuku = Integer.parseInt(idBukuStr);

    // Cek apakah Tanggal Pinjam tidak kosong
    String tanggalPinjam = txtTanggal.getText().trim();
    if (tanggalPinjam.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Tanggal Pinjam tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Inisialisasi objek peminjaman
    Peminjaman pin = new Peminjaman();

    pin.getAnggota().setIdanggota(idAnggota);
    pin.getBuku().setIdBuku(idBuku);
    pin.setPegawai((Pegawai)cmbPegawai.getSelectedItem());

    // Ambil dan set Tanggal Pinjam dan Tanggal Kembali
    pin.setTanggalPinjam(tanggalPinjam);
    pin.setTanggalKembali(txtKembali.getText().trim());

    // Simpan data peminjaman
    pin.save();
    // Tampilkan pesan sukses
    JOptionPane.showMessageDialog(this, "Data peminjaman berhasil disimpan.", "Sukses", JOptionPane.INFORMATION_MESSAGE);

    // Update ID Peminjaman pada field input
    txtNoUrut.setText(Integer.toString(pin.getIdPeminjaman()));

    // Refresh data di tabel
    tampilData();
    kosongkanForm();

} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, "Input ID harus berupa angka yang valid.", "Kesalahan Input", JOptionPane.ERROR_MESSAGE);
} catch (Exception e) {
    JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menyimpan data peminjaman.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
    e.getMessage();
}
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void txtNoUrutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNoUrutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNoUrutActionPerformed

    private void btnTambahBaruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahBaruActionPerformed
        // TODO add your handling code here:
        kosongkanForm();                       // Mengosongkan semua field
        btnSimpan.setEnabled(true);            // Mengaktifkan tombol simpan
        txtAnggota.setEnabled(true);        // ID Anggota hanya dibaca (disabled)
        txtBuku.setEnabled(true);           // ID Buku hanya dibaca (disabled)
        txtTanggal.setEnabled(true);    // Tanggal Pinjam hanya dibaca (disabled)
        txtKembali.setEnabled(true); 
        
        kosongkanForm();
    }//GEN-LAST:event_btnTambahBaruActionPerformed

    private void tblPeminjamanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPeminjamanMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblPeminjaman.getModel();
        int row = tblPeminjaman.getSelectedRow();
        Peminjaman pin = new Peminjaman();

        if (row >= 0) {
            pin = pin.getById(Integer.parseInt(model.getValueAt(row, 0).toString()));

            txtNoUrut.setText(String.valueOf(pin.getIdPeminjaman()));
            txtAnggota.setText(String.valueOf(pin.getAnggota().getIdanggota()));
            txtBuku.setText(String.valueOf(pin.getBuku().getIdBuku()));
            txtTanggal.setText(pin.getTanggalPinjam());
            txtKembali.setText(pin.getTanggalKembali());
            cmbPegawai.getModel().setSelectedItem(pin.getPegawai());

            txtNoUrut.setEnabled(false);    // ID Peminjaman hanya dibaca (disabled)
            txtAnggota.setEnabled(false);        // ID Anggota hanya dibaca (disabled)
            txtBuku.setEnabled(false);           // ID Buku hanya dibaca (disabled)
            txtTanggal.setEnabled(false);    // Tanggal Pinjam hanya dibaca (disabled)
            txtKembali.setEnabled(true);    // Tanggal Kembali diaktifkan

            btnUpdate.setEnabled(true);  
            btnSimpan.setEnabled(false);// Tombol Update diaktifkan
        } else {
            // Jika tidak ada baris yang dipilih, tombol Update tidak diaktifkan
            btnUpdate.setEnabled(false);
        }
    }//GEN-LAST:event_tblPeminjamanMouseClicked

    private void CariBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CariBukuActionPerformed
        // TODO add your handling code here:
        try {
            // Ambil teks dari TextField dan hapus spasi tambahan
            String input = txtBuku.getText().trim();

            // Cek apakah input kosong
            if (input.isEmpty()) {
                labelnama.setText("Input tidak boleh kosong. Masukkan ID yang valid.");
                return;
            }

            // Validasi input: coba konversi input ke angka
            int keyword = Integer.parseInt(input);

            // Panggil metode getById untuk mencari anggota berdasarkan ID
            Buku hasil = new Buku().getById(keyword);

            // Cek apakah hasil pencarian kosong
            if (hasil != null && hasil.getJudul()!= null) {
                // Tampilkan hanya nama anggota
                labelbuku.setText("Judul: " + hasil.getJudul());
            } else {
                labelbuku.setText("Buku dengan ID tersebut tidak ditemukan.");
            }
        } catch (NumberFormatException e) {
            // Tampilkan pesan jika input bukan angka
            labelbuku.setText("Input harus berupa angka. Silakan masukkan ID anggota yang valid.");
        } catch (Exception e) {
            // Tangkap exception lain jika ada kesalahan
            labelbuku.setText("Terjadi kesalahan saat mencari data Buku.");
            e.printStackTrace(); // Log error untuk debugging
        }
    }//GEN-LAST:event_CariBukuActionPerformed

    private void txtTanggalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTanggalActionPerformed
        // TODO add your handling code here:
        String inputTanggal = txtTanggal.getText().trim();

        // Cek apakah input kosong
        if (inputTanggal.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tanggal tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Menggunakan SimpleDateFormat untuk memformat tanggal
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date tanggal = sdf.parse(inputTanggal);

            // Tampilkan hasil format ke label atau tempat lainnya
            labelTanggalPeminjaman.setText(sdf.format(tanggal));
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Format tanggal tidak valid. Gunakan format yyyy-MM-dd.", "Peringatan", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtTanggalActionPerformed

    private void txtTanggalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTanggalFocusLost
        // TODO add your handling code here:
        String inputTanggal = txtTanggal.getText().trim();

    // Cek apakah input kosong
    if (inputTanggal.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Tanggal tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // Menggunakan SimpleDateFormat untuk memformat tanggal
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sdf.setLenient(false);  // Non-Lenient untuk memastikan hanya format yang benar

        Date tanggal = sdf.parse(inputTanggal);

        // Tampilkan hasil format ke label atau tempat lainnya
        labelTanggalPeminjaman.setText(sdf.format(tanggal));
    } catch (ParseException e) {
        JOptionPane.showMessageDialog(this, "Format tanggal tidak valid. Gunakan format yyyy-MM-dd.", "Peringatan", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_txtTanggalFocusLost

    private void txtKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKembaliActionPerformed
        // TODO add your handling code here:
        String inputTanggal = txtKembali.getText().trim();
        // Cek apakah input kosong
        if (inputTanggal.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tanggal tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Menggunakan SimpleDateFormat untuk memformat tanggal
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date tanggal = sdf.parse(inputTanggal);

            // Tampilkan hasil format ke label atau tempat lainnya
            labelTanggalKembali.setText(sdf.format(tanggal));
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Format tanggal tidak valid. Gunakan format yyyy-MM-dd.", "Peringatan", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtKembaliActionPerformed

    private void txtKembaliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKembaliFocusLost
        // TODO add your handling code here:
        String inputTanggalKembali = txtKembali.getText().trim();

        // Cek apakah input kosong
        if (inputTanggalKembali.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tanggal tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Menggunakan SimpleDateFormat untuk memformat tanggal
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false);  // Non-Lenient untuk memastikan hanya format yang benar

            Date tanggalKembali = sdf.parse(inputTanggalKembali);

            // Memastikan tanggal kembali tidak kurang dari tanggal peminjaman
            if (txtTanggal.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Tanggal peminjaman tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            } else {
                Date tanggalPinjam = sdf.parse(txtTanggal.getText().trim());

                if (tanggalKembali.before(tanggalPinjam)) {
                    JOptionPane.showMessageDialog(this, "Tanggal kembali tidak boleh kurang dari tanggal peminjaman.", "Peringatan", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Tampilkan hasil format ke label atau tempat lainnya
            labelTanggalKembali.setText(sdf.format(tanggalKembali));
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Format tanggal tidak valid. Gunakan format yyyy-MM-dd.", "Peringatan", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtKembaliFocusLost

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
    int idPeminjaman = Integer.parseInt(txtNoUrut.getText());

    // Ambil nilai Tanggal Kembali dari field
    String tanggalKembali = txtKembali.getText();

    // Ambil item pegawai dari combo box
    Pegawai selectedPegawai = (Pegawai) cmbPegawai.getSelectedItem();

    // Buat instance Peminjaman dengan ID yang diambil
    Peminjaman pin = new Peminjaman();
    pin.setIdPeminjaman(idPeminjaman);
    pin.setTanggalKembali(tanggalKembali);
    pin.setPegawai(selectedPegawai);

    // Panggil metode untuk menyimpan pembaruan ke database
    pin.update();
    tampilData();
    kosongkanForm();

    // Perbarui tampilan tabel atau beri umpan balik kepada pengguna
    JOptionPane.showMessageDialog(this, "Tanggal Kembali dan Pegawai berhasil diperbarui!");
    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPeminjaman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPeminjaman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPeminjaman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPeminjaman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPeminjaman().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CariAnggota;
    private javax.swing.JButton CariBuku;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnTambahBaru;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbPegawai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelTanggalKembali;
    private javax.swing.JLabel labelTanggalPeminjaman;
    private javax.swing.JLabel labelbuku;
    private javax.swing.JLabel labelnama;
    private javax.swing.JTable tblPeminjaman;
    private javax.swing.JTextField txtAnggota;
    private javax.swing.JTextField txtBuku;
    private javax.swing.JFormattedTextField txtKembali;
    private javax.swing.JTextField txtNoUrut;
    private javax.swing.JFormattedTextField txtTanggal;
    // End of variables declaration//GEN-END:variables
}
